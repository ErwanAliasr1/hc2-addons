{"name":"Vacances scolaires","type":"virtual_device","properties":{"deviceIcon":25,"currentIcon":"25","log":"","logTemp":"","mainLoop":"--local nbHeure = 12\n\n--local i = 0\n--while true do\n--\tif (i >= (nbHeure*2) or i == 0) then\n--    \ti = 0\n--\t\tfibaro:call(fibaro:getSelfId(), \"pressButton\", \"1\")\n--\tend\n--\tfibaro:sleep(30*60*1000)\n--  \ti = i + 1\n--end","ui.Label0.value":"Reste 21 jours","ui.Label1.value":"17.10.2015 - 02.11.2015 | Vacances de la Toussaint","ui.Label2.value":"19.12.2015 - 04.01.2016 | Vacances de Noël","ui.Label3.value":"13.02.2016 - 29.02.2016 | Vacances d'hiver","ui.Label4.value":"09.04.2016 - 25.04.2016 | Vacances de printemps","ui.Label5.value":"05.05.2016 - 08.05.2016 | Pont de l'Ascension","ui.Label6.value":"05.07.2016 - 01.09.2016 | Vacances d'été","ui.Label7.value":"19.10.2016 - 03.11.2016 | Vacances de la Toussaint","ui.Label8.value":"17.12.2016 - 03.01.2017 | Vacances de Noël","ui.Label9.value":"18.02.2017 - 06.03.2017 | Vacances d'hiver","ui.LabelZone.value":"[A] Grenoble","visible":"true","rows":[{"type":"button","elements":[{"id":1,"lua":true,"waitForResponse":false,"caption":"Rafraichir","name":"Button11","empty":false,"msg":"-- --------------------------------------------------------------------------------------------------------------\n-- Check that one and only one instance is in memory\n-- --------------------------------------------------------------------------------------------------------------\nif ((not Vacances) or (Vacances.errors >= 5)) then\n\n\tVacances = {\n\t\tdepartement = \"74\",\n\t\tvarglobal = \"VacScolaire\",\n  \t\terrors = 0\n\t}\n\t\n\t-- --------------------------------------------------------------------------------------------------------------\n\t-- URL\n\t-- --------------------------------------------------------------------------------------------------------------\n  \tVacances.url = \"telechargement.index-education.com\"\n\n\t-- --------------------------------------------------------------------------------------------------------------\n\t-- Optenir le fichier XML\n\t-- --------------------------------------------------------------------------------------------------------------\n\tVacances.getXml = function() \n\t\tlocal URL = Net.FHttp(Vacances.url)\n\t\tresponse, status, errorCode = URL:GET(\"/vacances.xml\")\n    \t--fibaro:debug(\"Debug http : \" .. \" stat :\" .. status .. \" err :\" .. errorCode)\n\t\treturn Vacances.iif(response ~= nil, Vacances.newParser().ParseXmlText(response), \"\")\n\tend\n\n\t-- --------------------------------------------------------------------------------------------------------------\n\t-- Rerecher la zone par rapport au numéro de département\n\t-- --------------------------------------------------------------------------------------------------------------\n\tVacances.getZone = function(xmlTable)\n    \t--fibaro:debug(\"Debug : recherche zone\")\n\t\tif (xmlTable) then\n\t\t\tif (not xmlTable.root) then \n\t\t\t\tVacances.errors = Vacances.errors+1 \n\t\t\t\treturn \"\"\n\t\t\tend\n\t\t\tlocal academies = xmlTable.root.academies\n\t\t\tfor i in pairs(academies:children()) do\n\t\t\t\tlocal academie = academies.academie[i]\n\t\t\t\tlocal zone = academie[\"@zone\"]\n        \t\tlocal nom = academie[\"@libelle\"]\n\t\t\t\tfor j in pairs(academie:children()) do\n          \t\t\tprint(nom .. zone)\n          \t\t\tlocal dep = academie.departement[j]\n\t\t\t\t\tif (type(dep) ~= \"nil\") then \n                        fibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.LabelZone.value\", \"[\"..zone..\"] \" .. nom)\n            \t\t\tif (academie.departement[j][\"@numero\"] == Vacances.departement) then \n\t\t\t\t\t\t\treturn zone, nom\n             \t\t\tend\n                    else\n            \t\t\tif (academie.departement[\"@numero\"] == Vacances.departement) then\n              \t\t\t\treturn zone, nom\n              \t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn \"\"\n\tend\n\t\n\t-- --------------------------------------------------------------------------------------------------------------\n\t-- Rechercher le libellé d'un congé\n\t-- --------------------------------------------------------------------------------------------------------------\n\tVacances.getLibelle = function(xmlTable, num)\n\t\tif (xmlTable) then\n\t\t\tif (not xmlTable.root) then \n\t\t\t\tVacances.errors = Vacances.errors+1 \n\t\t\t\treturn \"\"\n\t\t\tend\n\t\t\tlocal libelles = xmlTable.root.libelles\n\t\t\tfor i in pairs(libelles:children()) do\n\t\t\t\tif (libelles.libelle[i][\"@id\"] == num) then\n          \t\t\tlocal l = libelles.libelle[i]:value()\n          \t\t\tfor k = 1, string.len(l)-1 do\n            \t\t\tlocal c = string.sub(l, k, k)\n            \t\t\tlocal d = string.byte(c)\n            \t\t\t--fibaro:debug(c .. \" \" .. d)\n            \t\tend\n\t\t\t\t\treturn libelles.libelle[i]:value():gsub(string.char(235), \"ë\"):gsub(string.char(233), \"é\")\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn \"\"\n\tend\t\n\t\n\t-- --------------------------------------------------------------------------------------------------------------\n\t-- Obtenir les dates futures des vacances par rapport à la zone\n\t-- --------------------------------------------------------------------------------------------------------------\t\n\tVacances.getDatesFuture = function(xmlTable, zone, date) \n\t\tif (xmlTable) then\n\t\t\tif (not xmlTable.root) then \n\t\t\t\tVacances.errors = Vacances.errors+1 \n\t\t\t\treturn \"\"\n\t\t\tend\n\t\t\tlocal calendrier = xmlTable.root.calendrier\n\t\t\tlocal index = 1\n\t\t\tlocal envacance = false\n\t\t\tfor i in pairs(calendrier:children()) do\n\t\t\t\tlocal zonecal = calendrier.zone[i]\n\t\t\t\tif (zonecal[\"@libelle\"] == zone) then\n\t\t\t\t\t--return libelles.libelle[i]:value()\n\t\t\t\t\tfor j in pairs(zonecal:children()) do\n\t\t\t\t\t\tlocal datedeb = Vacances.getDateFormat(zonecal.vacances[j][\"@debut\"])\n\t\t\t\t\t\tlocal datefin = Vacances.getDateFormat(zonecal.vacances[j][\"@fin\"])\n\t\t\t\t\t\tif (datedeb <= os.time() and datefin > os.time()) then\n\t\t\t\t\t\t\tfibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.Label0.value\", \"En vacances\")\n\t\t\t\t\t\t\tenvacance = true\n              \t\t\t\tfibaro:debug(\"En vacances\")\n\t\t\t\t\t\t\tfibaro:setGlobal(Vacances.varglobal, \"0\")\n\t\t\t\t\t\tend\n\t\t\t\t\t\tif (datedeb > os.time()) then\n\t\t\t\t\t\t\tlocal msg = os.date(\"%d.%m.%Y\", datedeb) .. \" - \" .. os.date(\"%d.%m.%Y\", datefin)  .. \" | \" ..Vacances.getLibelle(xmlTable, zonecal.vacances[j][\"@libelle\"])\n\t\t\t\t\t\t\tfibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.Label\"..index..\".value\", msg)\n\t\t\t\t\t\t\tif (not envacance and index == 1) then\n                \t\t\t\tfibaro:debug(\"Pas vacances\")\n\t\t\t\t\t\t\t\tfibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.Label0.value\", \"Reste \" .. Vacances.delai(datedeb) .. \" jours\"  )\n\t\t\t\t\t\t\t\tfibaro:setGlobal(Vacances.varglobal, Vacances.delai(datedeb)..\"\")\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tindex = index + 1\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\tend\n\t\t\tend\n\t\tend\t\n\tend\n\t\n\t-- --------------------------------------------------------------------------------------------------------------\n\t-- Transforme une date en string en date exploitable\n\t-- --------------------------------------------------------------------------------------------------------------\t\t\n\tVacances.getDateFormat = function(sdate)\n\t\tyear,month,day = sdate:match(\"(%d+).(%d+).(%d+)\")\n\t\treturn os.time({day=day,month=month,year=year,hour=0,min=0,sec=0})\n\tend\n\n\t-- --------------------------------------------------------------------------------------------------------------\n\t-- Calcule le nombre de jours entre 2 dates\n\t-- --------------------------------------------------------------------------------------------------------------\t\n\tVacances.delai = function(dated) \n\t\tdiff = os.difftime(dated, os.time())\n    \tlocal res = math.floor(diff / (60*60*24))\n    \tif ((diff / (60*60*24)) > 0 and res == 0) then\n    \t\tres = 1\n    \tend\n\t\treturn res\n\tend\n\t\n\t-- -------------------------------------------------------------------------------------------------------------\n\t-- Test the condition and return true or false param depending of the result\n\t-- param : condition (condition to test)\n\t--            iftrue (result to return of condition if true)\n\t--            iftfalse (result to return of condition if false)\n\t-- -------------------------------------------------------------------------------------------------------------\n\tVacances.iif = function(condition, iftrue, iffalse)\n\t\tif (condition) then\n\t\t\treturn iftrue\n\t\tend\n\t\treturn iffalse\n\tend\n\n\t-- -------------------------------------------------------------------------------------------------------------\n\t-- This is a modified version of Corona-XML-Module by Jonathan Beebe which in turn \n\t-- is based on Alexander Makeev's Lua-only XML parser .\n\t-- see https://github.com/Cluain/Lua-Simple-XML-Parser\n\t-- -------------------------------------------------------------------------------------------------------------\n\tVacances.newParser = function()\n\n\t\tparseXml = {}\n\n\t\tparseXml.FromXmlString = function(value)\n\t\t\tvalue = string.gsub(value, \"&#x([%x]+)%;\",\n\t\t\t    function(h)\n\t\t\t\treturn string.char(tonumber(h, 16))\n\t\t\t    end);\n\t\t\tvalue = string.gsub(value, \"&#([0-9]+)%;\",\n\t\t\t    function(h)\n\t\t\t\treturn string.char(tonumber(h, 10))\n\t\t\t    end);\n\t\t\tvalue = string.gsub(value, \"\\\"\", \"\\\"\");\n\t\t\tvalue = string.gsub(value, \"'\", \"'\");\n\t\t\tvalue = string.gsub(value, \">\", \">\");\n\t\t\tvalue = string.gsub(value, \"<\", \"<\");\n\t\t\tvalue = string.gsub(value, \"&\", \"&\");\n\t\t\treturn value;\n\t\tend\n\n\t\tparseXml.ParseArgs = function(node, s)\n\t\t\tstring.gsub(s, \"(%w+)=([\\\"'])(.-)%2\", function(w, _, a)\n\t\t\t    node:addProperty(w,  parseXml.FromXmlString(a))\n\t\t\tend)\n\t\tend\n\n\t\tparseXml.ParseXmlText = function(xmlText)\n\t\t\tlocal stack = {}\n\t\t\tlocal top = parseXml.newNode()\n\t\t\ttable.insert(stack, top)\n\t\t\tlocal ni, c, label, xarg, empty\n\t\t\tlocal i, j = 1, 1\n\t\t\twhile true do\n\t\t\t    ni, j, c, label, xarg, empty = string.find(xmlText, \"<(%/?)([%w_:]+)(.-)(%/?)>\", i)\n\t\t\t    if not ni then break end\n\t\t\t    local text = string.sub(xmlText, i, ni - 1);\n\t\t\t    if not string.find(text, \"^%s*$\") then\n\t\t\t\tlocal lVal = (top:value() or \"\") .. parseXml.FromXmlString(text)\n\t\t\t\tstack[#stack]:setValue(lVal)\n\t\t\t    end\n\t\t\t    if empty == \"/\" then -- empty element tag\n\t\t\t\tlocal lNode = parseXml.newNode(label)\n\t\t\t\tparseXml.ParseArgs(lNode, xarg)\n\t\t\t\ttop:addChild(lNode)\n\t\t\t    elseif c == \"\" then -- start tag\n\t\t\t\tlocal lNode = parseXml.newNode(label)\n\t\t\t\tparseXml.ParseArgs(lNode, xarg)\n\t\t\t\ttable.insert(stack, lNode)\n\t\t\t\ttop = lNode\n\t\t\t    else -- end tag\n\t\t\t\tlocal toclose = table.remove(stack) -- remove top\n\n\t\t\t\ttop = stack[#stack]\n\t\t\t\tif #stack < 1 then\n\t\t\t\t    error(\"XmlParser: nothing to close with \" .. label)\n\t\t\t\tend\n\t\t\t\tif toclose:name() ~= label then\n\t\t\t\t    error(\"XmlParser: trying to close \" .. toclose.name .. \" with \" .. label)\n\t\t\t\tend\n\t\t\t\ttop:addChild(toclose)\n\t\t\t    end\n\t\t\t    i = j + 1\n\t\t\tend\n\t\t\tlocal text = string.sub(xmlText, i);\n\t\t\tif #stack > 1 then\n\t\t\t    error(\"XmlParser: unclosed \" .. stack[#stack]:name())\n\t\t\tend\n\t\t\treturn top\n\t\tend\n\n\t\tparseXml.newNode = function(name)\n\t\t    local node = {}\n\t\t    node.___value = nil\n\t\t    node.___name = name\n\t\t    node.___children = {}\n\t\t    node.___props = {}\n\t\t    function node:value() return self.___value end\n\t\t    function node:setValue(val) self.___value = val end\n\t\t    function node:name() return self.___name end\n\t\t    function node:setName(name) self.___name = name end\n\t\t    function node:children() return self.___children end\n\t\t    function node:numChildren() return #self.___children end\n\t\t    function node:addChild(child)\n\t\t\tif self[child:name()] ~= nil then\n\t\t\t    if type(self[child:name()].name) == \"function\" then\n\t\t\t\tlocal tempTable = {}\n\t\t\t\ttable.insert(tempTable, self[child:name()])\n\t\t\t\tself[child:name()] = tempTable\n\t\t\t    end\n\t\t\t    table.insert(self[child:name()], child)\n\t\t\telse\n\t\t\t    self[child:name()] = child\n\t\t\tend\n\t\t\ttable.insert(self.___children, child)\n\t\t    end\n\t\t    function node:properties() return self.___props end\n\t\t    function node:numProperties() return #self.___props end\n\t\t    function node:addProperty(name, value)\n\t\t\tlocal lName = \"@\" .. name\n\t\t\tif self[lName] ~= nil then\n\t\t\t    if type(self[lName]) == \"string\" then\n\t\t\t\tlocal tempTable = {}\n\t\t\t\ttable.insert(tempTable, self[lName])\n\t\t\t\tself[lName] = tempTable\n\t\t\t    end\n\t\t\t    table.insert(self[lName], value)\n\t\t\telse\n\t\t\t    self[lName] = value\n\t\t\tend\n\t\t\ttable.insert(self.___props, { name = name, value = self[name] })\n\t\t    end\n\t\t    return node\n\t\tend\n\n\t\treturn parseXml;\n\tend\n\nend\n\n-- -------------------------------------------------------------------------------------------------------------\n-- RUN\n-- -------------------------------------------------------------------------------------------------------------\nfibaro:debug(\"Lecture du fichier distant ...\")\nlocal xmlTable = Vacances.getXml()\nif (Vacances.errors > 0) then \n\ttime = \"Erreur : \" .. Vacances.errors \n\tfibaro:debug(time)\nelse\n\tfibaro:debug(\"Recherche de la zone pour le département : \" .. Vacances.departement .. \" ...\")\n\tlocal zone, nom = Vacances.getZone(xmlTable)\n\tfibaro:debug(Vacances.departement .. \" ==> [\" .. zone .. \"] \" .. nom)\n\n\tVacances.getDatesFuture(xmlTable, zone, os.time()) \n\nend","buttonIcon":25,"favourite":false,"main":true}]},{"type":"label","elements":[{"id":2,"lua":false,"waitForResponse":false,"caption":"Statut","name":"Label0","favourite":false,"main":true}]},{"type":"label","elements":[{"id":3,"lua":false,"waitForResponse":false,"caption":"Zone","name":"LabelZone","favourite":false,"main":false}]},{"type":"label","elements":[{"id":4,"lua":false,"waitForResponse":false,"caption":"","name":"Label1","favourite":false,"main":false}]},{"type":"label","elements":[{"id":5,"lua":false,"waitForResponse":false,"caption":"","name":"Label2","favourite":false,"main":false}]},{"type":"label","elements":[{"id":6,"lua":false,"waitForResponse":false,"caption":"","name":"Label3","favourite":false,"main":false}]},{"type":"label","elements":[{"id":7,"lua":false,"waitForResponse":false,"caption":"","name":"Label4","favourite":false,"main":false}]},{"type":"label","elements":[{"id":8,"lua":false,"waitForResponse":false,"caption":"","name":"Label5","favourite":false,"main":false}]},{"type":"label","elements":[{"id":9,"lua":false,"waitForResponse":false,"caption":"","name":"Label6","favourite":false,"main":false}]},{"type":"label","elements":[{"id":10,"lua":false,"waitForResponse":false,"caption":"","name":"Label7","favourite":false,"main":false}]},{"type":"label","elements":[{"id":11,"lua":false,"waitForResponse":false,"caption":"","name":"Label8","favourite":false,"main":false}]},{"type":"label","elements":[{"id":12,"lua":false,"waitForResponse":false,"caption":"","name":"Label9","favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}