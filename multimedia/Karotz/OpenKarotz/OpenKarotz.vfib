{"name":"OpenKarotz","type":"virtual_device","properties":{"deviceIcon":1005,"currentIcon":"1005","mainLoop":"if (not setup) then\n  \n   setup = {}\n  \n   setup.init = function()\n    \n        fibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.LabelApps.value\", \"\");\n        fibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.LabelEars.value\", \"\");\n        fibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.LabelColors.value\", \"\");\n          \n    \tfibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.SliderRed.value\", 0);\n    \tfibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.SliderGreen.value\", 0);\n        fibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.SliderBlue.value\", 0);\n    \n    \tfibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.SliderLeft.value\", 0);\n    \tfibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.SliderRight.value\", 0);\n    \n   end\n    \n   setup.init()\n  \nend\n\n\n\n-- Version 1.20\n-- Steven P.\n\n--1.10\n--   Add Squeeze\n--   Add move left or right ears\n\n-- 1.15\n-- Fix colors\n\n-- 1.20 \n-- Add labels","saveLogs":"1","ui.LabelApps.value":"","ui.LabelColors.value":"","ui.LabelEars.value":"","ui.SliderBlue.value":"0","ui.SliderGreen.value":"0","ui.SliderLeft.value":"0","ui.SliderRed.value":"0","ui.SliderRight.value":"0","ui.SliderSpeed.value":"0","rows":[{"type":"button","elements":[{"id":1,"lua":true,"waitForResponse":false,"caption":"TTS","name":"ButtonParler","empty":false,"msg":"local voice = \"alice\"\n\nlocal msg = fibaro:getGlobal(\"Karotz\")\n\n\nlocal ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nif (msg ~= \"\") then\n\tresponse = Karotz:GET(\"/cgi-bin/tts?voice=\"..voice..\"&text=\"..msg:gsub(\" \", \"+\")..\"&nocache=0\")\nend\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK\")\nelse\n\tfibaro:debug(\"ERROR\")\nend","buttonIcon":1005,"favourite":false,"main":true}]},{"type":"button","elements":[{"id":2,"lua":true,"waitForResponse":false,"caption":"Photo","name":"ButtonPhoto","empty":false,"msg":"local ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nresponse = Karotz:GET(\"/cgi-bin/snapshot?silent=1\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK Saved on Karotz\")\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":1005,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":3,"lua":false,"waitForResponse":false,"caption":"Oreilles","name":"LabelEars","favourite":false,"main":false}]},{"type":"slider","elements":[{"id":4,"lua":true,"waitForResponse":false,"caption":"Oreille Gauche","name":"SliderLeft","msg":"function getValue(sliderValue)\n  local value = 0\n  if (sliderValue and sliderValue ~= \"\") then\n  \tvalue = tonumber(sliderValue)\n  end\n  if (value > 0) then \n      value = math.ceil(value * 16 / 100) \n \t  fibaro:debug(value)\n  end\n  return value  \nend\n\n\nlocal ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\n\nlocal gauche = getValue(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderLeft.value\"))\nlocal droite = getValue(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderRight.value\"))\nresponse = Karotz:GET(\"/cgi-bin/ears?left=\"..gauche..\"&right=\"..droite..\"&noreset=1\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK \" .. color[1]..color[2]..color[3])\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":0,"value":0,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":5,"lua":true,"waitForResponse":false,"caption":"Oreille Droite","name":"SliderRight","msg":"function getValue(sliderValue)\n  local value = 0\n  if (sliderValue and sliderValue ~= \"\") then\n  \tvalue = tonumber(sliderValue)\n  end\n  if (value > 0) then \n      value = math.ceil(value * 16 / 100) \n \t  fibaro:debug(value)\n  end\n  return value  \nend\n\n\nlocal ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\n\nlocal gauche = getValue(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderLeft.value\"))\nlocal droite = getValue(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderRight.value\"))\nresponse = Karotz:GET(\"/cgi-bin/ears?left=\"..gauche..\"&right=\"..droite..\"&noreset=1\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK \" .. color[1]..color[2]..color[3])\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":0,"value":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":6,"lua":true,"waitForResponse":false,"caption":"AlÃ©atoire","name":"ButtonEars","empty":false,"msg":"local ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nresponse = Karotz:GET(\"/cgi-bin/ears_random\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK\")\n    local table = json.decode(response)\n    fibaro:call(fibaro:getSelfId(), \"setProperty\",\"ui.SliderLeft.value\", math.ceil(tonumber(table.left*100/16)))\n    fibaro:call(fibaro:getSelfId(), \"setProperty\",\"ui.SliderRight.value\", math.ceil(tonumber(table.right*100/16)))\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":1005,"favourite":false,"main":false},{"id":7,"lua":true,"waitForResponse":false,"caption":"Reset","name":"ButtonReset","empty":false,"msg":"local ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nresponse = Karotz:GET(\"/cgi-bin/ears_reset\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK\")\n\tfibaro:call(fibaro:getSelfId(),\"setProperty\", \"ui.SliderLeft.value\",0)\n\tfibaro:call(fibaro:getSelfId(),\"setProperty\", \"ui.SliderRight.value\",0)\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":1005,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":8,"lua":false,"waitForResponse":false,"caption":"Led","name":"LabelColors","favourite":false,"main":false}]},{"type":"slider","elements":[{"id":9,"lua":true,"waitForResponse":false,"caption":"Rouge","name":"SliderRed","msg":"function DEC_HEX(IN)\n    local B,K,OUT,I,D=16,\"0123456789ABCDEF\",\"\",0\n    while IN>0 do\n        I=I+1\n        IN,D=math.floor(IN/B),math.mod(IN,B)+1\n        OUT=string.sub(K,D,D)..OUT\n    end\n    return OUT\nend\n\nfunction getHexa(sliderValue)\n  local value = 0\n  if (sliderValue and sliderValue ~= \"\") then\n    fibaro:debug(sliderValue)\n  \tvalue = tonumber(sliderValue)\n  end\n  if (value > 0) then \n      value = math.ceil(value * 255 / 100) \n \t  fibaro:debug(value)\n      local hex = DEC_HEX(value)\n      if (string.len(hex) < 2) then hex = \"0\"..hex end\n      return hex\n  else\n      return \"00\"\n  end  \nend\nfunction getSpeed()\n  local speed = fibaro:getValue(fibaro:getSelfId(), \"ui.SliderSpeed.value\")\n  if (not speed or speed == \"\" or tonumber(speed) == 0) then\n    speed = 0\n  else\n    speed = 1200-(math.ceil(tonumber(speed) * 1200 / 100))+300\n  end\n  fibaro:log(\"speed\"..speed)\n  return speed\nend\n\nlocal color = {}\n\ncolor[1] = getHexa(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderRed.value\"))\ncolor[2] = getHexa(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderGreen.value\"))\ncolor[3] = getHexa(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderBlue.value\"))\n\nlocal ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nlocal speed = getSpeed()\nif (speed > 0) then speed = speed..\"&pulse=1\" else speed = speed..\"&pulse=0\" end\nresponse = Karotz:GET(\"/cgi-bin/leds?color=\"..color[1]..color[2]..color[3]..\"&speed=\"..speed..\"&nomemory=1\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK \" .. color[1]..color[2]..color[3])\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":1005,"value":0,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":10,"lua":true,"waitForResponse":false,"caption":"Vert","name":"SliderGreen","msg":"function DEC_HEX(IN)\n    local B,K,OUT,I,D=16,\"0123456789ABCDEF\",\"\",0\n    while IN>0 do\n        I=I+1\n        IN,D=math.floor(IN/B),math.mod(IN,B)+1\n        OUT=string.sub(K,D,D)..OUT\n    end\n    return OUT\nend\n\nfunction getHexa(sliderValue)\n  local value = 0\n  if (sliderValue and sliderValue ~= \"\") then\n    fibaro:debug(sliderValue)\n  \tvalue = tonumber(sliderValue)\n  end\n  if (value > 0) then \n      value = math.ceil(value * 255 / 100) \n \t  fibaro:debug(value)\n      local hex = DEC_HEX(value)\n      if (string.len(hex) < 2) then hex = \"0\"..hex end\n      return hex\n  else\n      return \"00\"\n  end  \nend\nfunction getSpeed()\n  local speed = fibaro:getValue(fibaro:getSelfId(), \"ui.SliderSpeed.value\")\n  if (not speed or speed == \"\" or tonumber(speed) == 0) then\n    speed = 0\n  else\n    speed = 1200-(math.ceil(tonumber(speed) * 1200 / 100))+300\n  end\n  fibaro:log(\"speed\"..speed)\n  return speed\nend\n\nlocal color = {}\n\ncolor[1] = getHexa(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderRed.value\"))\ncolor[2] = getHexa(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderGreen.value\"))\ncolor[3] = getHexa(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderBlue.value\"))\n\nlocal ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nlocal speed = getSpeed()\nif (speed > 0) then speed = speed..\"&pulse=1\" else speed = speed..\"&pulse=0\" end\nresponse = Karotz:GET(\"/cgi-bin/leds?color=\"..color[1]..color[2]..color[3]..\"&speed=\"..speed..\"&nomemory=1\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK \" .. color[1]..color[2]..color[3])\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":1005,"value":0,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":11,"lua":true,"waitForResponse":false,"caption":"Bleu","name":"SliderBlue","msg":"function DEC_HEX(IN)\n    local B,K,OUT,I,D=16,\"0123456789ABCDEF\",\"\",0\n    while IN>0 do\n        I=I+1\n        IN,D=math.floor(IN/B),math.mod(IN,B)+1\n        OUT=string.sub(K,D,D)..OUT\n    end\n    return OUT\nend\n\nfunction getHexa(sliderValue)\n  local value = 0\n  if (sliderValue and sliderValue ~= \"\") then\n    fibaro:debug(sliderValue)\n  \tvalue = tonumber(sliderValue)\n  end\n  if (value > 0) then \n      value = math.ceil(value * 255 / 100) \n \t  fibaro:debug(value)\n      local hex = DEC_HEX(value)\n      if (string.len(hex) < 2) then hex = \"0\"..hex end\n      return hex\n  else\n      return \"00\"\n  end  \nend\nfunction getSpeed()\n  local speed = fibaro:getValue(fibaro:getSelfId(), \"ui.SliderSpeed.value\")\n  if (not speed or speed == \"\" or tonumber(speed) == 0) then\n    speed = 0\n  else\n    speed = 1200-(math.ceil(tonumber(speed) * 1200 / 100))+300\n  end\n  fibaro:log(\"speed\"..speed)\n  return speed\nend\n\nlocal color = {}\n\ncolor[1] = getHexa(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderRed.value\"))\ncolor[2] = getHexa(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderGreen.value\"))\ncolor[3] = getHexa(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderBlue.value\"))\n\nlocal ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nlocal speed = getSpeed()\nif (speed > 0) then speed = speed..\"&pulse=1\" else speed = speed..\"&pulse=0\" end\nresponse = Karotz:GET(\"/cgi-bin/leds?color=\"..color[1]..color[2]..color[3]..\"&speed=\"..speed..\"&nomemory=1\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK \" .. color[1]..color[2]..color[3])\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":1005,"value":0,"favourite":false,"main":false}]},{"type":"slider","elements":[{"id":12,"lua":true,"waitForResponse":false,"caption":"Clignotement","name":"SliderSpeed","msg":"function DEC_HEX(IN)\n    local B,K,OUT,I,D=16,\"0123456789ABCDEF\",\"\",0\n    while IN>0 do\n        I=I+1\n        IN,D=math.floor(IN/B),math.mod(IN,B)+1\n        OUT=string.sub(K,D,D)..OUT\n    end\n    return OUT\nend\n\nfunction getHexa(sliderValue)\n  local value = 0\n  if (sliderValue and sliderValue ~= \"\") then\n    fibaro:debug(sliderValue)\n  \tvalue = tonumber(sliderValue)\n  end\n  if (value > 0) then \n      value = math.ceil(value * 255 / 100) \n \t  fibaro:debug(value)\n      local hex = DEC_HEX(value)\n      if (string.len(hex) < 2) then hex = \"0\"..hex end\n      return hex\n  else\n      return \"00\"\n  end  \nend\nfunction getSpeed()\n  local speed = fibaro:getValue(fibaro:getSelfId(), \"ui.SliderSpeed.value\")\n  if (not speed or speed == \"\" or tonumber(speed) == 0) then\n    speed = 0\n  else\n    speed = 1200-(math.ceil(tonumber(speed) * 1200 / 100))+300\n  end\n  fibaro:log(\"speed\"..speed)\n  return speed\nend\n\nlocal color = {}\n\ncolor[1] = getHexa(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderRed.value\"))\ncolor[2] = getHexa(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderGreen.value\"))\ncolor[3] = getHexa(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderBlue.value\"))\n\nlocal ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nlocal speed = getSpeed()\nif (speed > 0) then speed = speed..\"&pulse=1\" else speed = speed..\"&pulse=0\" end\nresponse = Karotz:GET(\"/cgi-bin/leds?color=\"..color[1]..color[2]..color[3]..\"&speed=\"..speed..\"&nomemory=1\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK \" .. color[1]..color[2]..color[3])\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":1005,"value":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":13,"lua":true,"waitForResponse":false,"caption":"Enregistrer","name":"ButtonSave","empty":false,"msg":"function DEC_HEX(IN)\n    local B,K,OUT,I,D=16,\"0123456789ABCDEF\",\"\",0\n    while IN>0 do\n        I=I+1\n        IN,D=math.floor(IN/B),math.mod(IN,B)+1\n        OUT=string.sub(K,D,D)..OUT\n    end\n    return OUT\nend\n\nfunction getHexa(sliderValue)\n  local value = 0\n  if (sliderValue and sliderValue ~= \"\") then\n    fibaro:debug(sliderValue)\n  \tvalue = tonumber(sliderValue)\n  end\n  if (value > 0) then \n      value = math.ceil(value * 255 / 100) \n \t  fibaro:debug(value)\n      local hex = DEC_HEX(value)\n      if (string.len(hex) < 2) then hex = \"0\"..hex end\n      return hex\n  else\n      return \"00\"\n  end  \nend\nfunction getSpeed()\n  local speed = fibaro:getValue(fibaro:getSelfId(), \"ui.SliderSpeed.value\")\n  if (not speed or speed == \"\" or tonumber(speed) == 0) then\n    speed = 0\n  else\n    speed = 1200-(math.ceil(tonumber(speed) * 1200 / 100))+300\n  end\n  fibaro:log(\"speed\"..speed)\n  return speed\nend\n\nlocal color = {}\n\ncolor[1] = getHexa(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderRed.value\"))\ncolor[2] = getHexa(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderGreen.value\"))\ncolor[3] = getHexa(fibaro:getValue(fibaro:getSelfId(), \"ui.SliderBlue.value\"))\n\nlocal ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nlocal speed = getSpeed()\nif (speed > 0) then speed = speed..\"&pulse=1\" else speed = speed..\"&pulse=0\" end\nresponse = Karotz:GET(\"/cgi-bin/leds?color=\"..color[1]..color[2]..color[3]..\"&speed=\"..speed)\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK \" .. color[1]..color[2]..color[3] .. \" enregitrÃ©\")\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":0,"favourite":false,"main":false},{"id":14,"lua":true,"waitForResponse":false,"caption":"Annuler","name":"ButtonCancel","empty":false,"msg":"local ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nresponse = Karotz:GET(\"/cgi-bin/leds\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK \" .. color[1]..color[2]..color[3] .. \" annulÃ©e\")\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":15,"lua":false,"waitForResponse":false,"caption":"Applications","name":"LabelApps","favourite":false,"main":false}]},{"type":"button","elements":[{"id":16,"lua":true,"waitForResponse":false,"caption":"Mood","name":"ButtonMood","empty":false,"msg":"local ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nresponse = Karotz:GET(\"/cgi-bin/apps/moods\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK\")\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":1005,"favourite":false,"main":false},{"id":17,"lua":true,"waitForResponse":false,"caption":"Clock","name":"ButtonClock","empty":false,"msg":"local ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nresponse = Karotz:GET(\"/cgi-bin/apps/clock\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK\")\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":1005,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":18,"lua":true,"waitForResponse":false,"caption":"Squeeze Play","name":"ButtonSPlay","empty":false,"msg":"local ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nresponse = Karotz:GET(\"/cgi-bin/squeezebox?cmd=start\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK\")\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":0,"favourite":false,"main":false},{"id":19,"lua":true,"waitForResponse":false,"caption":"Squeeze Stop","name":"ButtonSStop","empty":false,"msg":"local ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nresponse = Karotz:GET(\"/cgi-bin/squeezebox?cmd=start\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK\")\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":20,"lua":true,"waitForResponse":false,"caption":"Sleep","name":"ButtonSleep","empty":false,"msg":"local ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nresponse = Karotz:GET(\"/cgi-bin/sleep\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK\")\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":1005,"favourite":false,"main":false},{"id":21,"lua":true,"waitForResponse":false,"caption":"Wakeup","name":"ButtonWakeUp","empty":false,"msg":"local ip_module = fibaro:get(fibaro:getSelfId(), \"IPAddress\")\nlocal port = fibaro:get(fibaro:getSelfId(), \"TCPPort\")\nKarotz = Net.FHttp(ip_module, port)\nresponse = Karotz:GET(\"/cgi-bin/wakeup?silent=1\")\n\nif (string.find(response, \"return\\\":\\\"0\")) then\n\tfibaro:log(\"OK\")\nelse\n\tfibaro:log(\"ERROR\")\nend","buttonIcon":1005,"favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}